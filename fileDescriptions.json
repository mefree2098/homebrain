{
	".gitignore": "Version control ignore configuration specifying directories and files to exclude from Git version tracking, including node modules, environment files, package locks, and upload directories.",
	"fileDescriptions.json": "Centralized JSON configuration for storing and managing file documentation descriptions across the project.",
	"package.json": "Root project configuration managing client and server scripts, including installation, development, seeding, and database management commands for the HomeBrain application.",
	"client/.env.example": "Environment configuration template for HomeBrain client, providing toggles for API and polling debug logging during development.",
	"client/components.json": "Configuration schema for Shadcn UI library, defining project styling, component paths, Tailwind settings, and import aliases.",
	"client/eslint.config.js": "ESLint configuration for TypeScript React project, setting up recommended rules, browser globals, and React-specific linting for TypeScript and TSX files.",
	"client/index.html": "Entry point HTML file for HomeBrain React application, configuring basic metadata, favicon, and loading the main React entry script.",
	"client/package.json": "Dependency configuration for a Vite React client, specifying project scripts, UI libraries like Radix UI and Heroicons, state management tools, and development dependencies for TypeScript, ESLint, and Tailwind CSS.",
	"client/postcss.config.js": "PostCSS configuration file setting up Tailwind CSS and autoprefixer plugins for style processing and cross-browser compatibility.",
	"client/tailwind.config.js": "Tailwind CSS configuration file with custom theme extensions, defining color palette, border radii, dark mode support, and animation keyframes for the application's design system.",
	"client/tsconfig.app.json": "TypeScript configuration file for the client application, specifying compiler options, module resolution, strict type checking, and source directory inclusion.",
	"client/tsconfig.json": "TypeScript configuration file for the client project, managing compiler options, path aliases, and referencing additional TypeScript configuration files for the application and Node.js environment.",
	"client/tsconfig.node.json": "TypeScript configuration for Node.js build process, defining strict compiler options and build settings for Vite project with ES module support.",
	"client/vite.config.ts": "Vite configuration file for React client, setting up development server proxies, path aliases, and build plugins with custom server settings.",
	"client/src/App.css": "Global CSS stylesheet defining root layout, logo styling, animation effects, and responsive design for the application's main components.",
	"client/src/App.tsx": "Root application component configuring routing, authentication, theming, and wrapping all main pages with protected routes and a consistent layout.",
	"client/src/index.css": "Global CSS configuration for Tailwind, defining color variables, dark mode styles, and base layer styling for the application's theme and design system.",
	"client/src/main.tsx": "React application entry point, rendering the main App component within StrictMode and initializing the root DOM element.",
	"client/src/vite-env.d.ts": "TypeScript declaration file providing Vite client-side type references and environment configuration for the project.",
	"client/src/api/api.ts": "Axios-based API utility with automatic token refresh, interceptors for authentication, and wrapper methods for HTTP requests (GET, POST, PUT, DELETE).",
	"client/src/api/auth.ts": "Authentication API utility functions for user login, registration, and logout with error handling and token management.",
	"client/src/api/automations.ts": "API utility functions for managing automations, providing methods to fetch, create, update, toggle, delete, and execute automation workflows with comprehensive error handling.",
	"client/src/api/devices.ts": "API utility functions for smart home device management, providing methods to fetch, control, create, update, and delete devices with comprehensive filtering and error handling.",
	"client/src/api/elevenLabs.ts": "ElevenLabs API utility functions for retrieving voices, generating text-to-speech, validating voice IDs, and managing audio playback with comprehensive error handling.",
	"client/src/api/maintenance.ts": "API utility functions for system maintenance, providing methods to clear data, sync devices, reset settings, and perform system health checks across various integrations like SmartThings and INSTEON.",
	"client/src/api/profiles.ts": "API utility functions for managing user profiles, providing methods to create, retrieve, update, and delete profiles with built-in request caching and error handling.",
	"client/src/api/scenes.ts": "API utility functions for managing smart home scenes, providing methods to retrieve, activate, and create scenes with error handling.",
	"client/src/api/security.ts": "API utility functions for security alarm system, providing methods to retrieve, arm, disarm, manage zones, and configure SmartThings integration.",
	"client/src/api/settings.ts": "API utility functions for managing application settings, providing methods to retrieve, update, and test connectivity for various services like ElevenLabs, OpenAI, Anthropic, local LLM, and SmartThings.",
	"client/src/api/smartThings.ts": "API utility functions for SmartThings integration, providing methods for device management, scene execution, authentication, and home security system (STHM) control.",
	"client/src/api/voice.ts": "Voice API utility functions with advanced request caching, providing methods to retrieve, test, and manage voice devices and system status with performance optimizations.",
	"client/src/components/Footer.tsx": "Footer component with fixed positioning, displaying attribution and branding information at the bottom of the page with a blurred background and border-top styling.",
	"client/src/components/Header.tsx": "Header component managing voice status, theme toggle, navigation, and user authentication with dynamic UI state and interactions for voice commands and logout functionality.",
	"client/src/components/Layout.tsx": "Main application layout component rendering Header, Sidebar, Footer, and dynamically injected content with responsive gradient background and structured page sections.",
	"client/src/components/ProtectedRoute.tsx": "Higher-order React component that redirects unauthenticated users to the login page while preserving the original navigation destination.",
	"client/src/components/Sidebar.tsx": "Responsive sidebar component for smart home application, rendering navigation menu with dynamic routing, active state highlighting, and a voice command information section.",
	"client/src/components/VoiceSelector.tsx": "Reusable React component for voice selection with advanced filtering, search, and optional preview playback functionality, supporting detailed voice metadata and dynamic rendering.",
	"client/src/components/dashboard/DashboardWidget.tsx": "Reusable dashboard widget component for smart home devices, rendering device status, controls, and interactive sliders for lights and thermostats with dynamic icons and styling.",
	"client/src/components/dashboard/QuickActions.tsx": "Renders a grid of quick scene action buttons with dynamic icons and gradient colors, allowing users to activate predefined smart home scenes with visual and interactive UI elements.",
	"client/src/components/dashboard/SecurityAlarmWidget.tsx": "Interactive security alarm dashboard widget with real-time status tracking, arming/disarming controls, and SmartThings synchronization functionality.",
	"client/src/components/dashboard/VoiceCommandPanel.tsx": "React component for a voice command interface that allows users to create automations through natural language input, with a toggleable panel, text input, processing functionality, and example command suggestions.",
	"client/src/components/ui/accordion.tsx": "Radix UI-based Accordion component with customizable trigger, content, and item subcomponents, providing an accessible and animated expandable/collapsible interface.",
	"client/src/components/ui/alert-dialog.tsx": "Radix UI-based Alert Dialog component library with customizable overlay, content, header, footer, title, description, action, and cancel elements for creating responsive and accessible confirmation dialogs.",
	"client/src/components/ui/alert.tsx": "Reusable Alert component with customizable variants, supporting title and description, built using React and class-variance-authority for flexible styling.",
	"client/src/components/ui/aspect-ratio.tsx": "Radix UI AspectRatio wrapper component for maintaining consistent media and container proportions in responsive designs.",
	"client/src/components/ui/avatar.tsx": "Radix UI-based Avatar component with customizable image and fallback states, providing a flexible and accessible user profile image display mechanism.",
	"client/src/components/ui/badge.tsx": "Reusable Badge component with configurable variants using class-variance-authority, supporting default, secondary, destructive, and outline styles with dynamic styling and accessibility features.",
	"client/src/components/ui/breadcrumb.tsx": "Reusable Radix UI-based Breadcrumb component library with composable subcomponents for navigation, supporting custom styling, separators, and accessibility features.",
	"client/src/components/ui/button.tsx": "Reusable Button component with configurable variants and sizes, leveraging class-variance-authority for dynamic styling and supporting custom child rendering.",
	"client/src/components/ui/calendar.tsx": "Reusable calendar component built with react-day-picker, providing customizable styling and navigation with responsive design and extensive class-based theming.",
	"client/src/components/ui/card.tsx": "Reusable Card component library with composable subcomponents (Header, Title, Description, Content, Footer) for creating flexible and styled card interfaces in React.",
	"client/src/components/ui/carousel.tsx": "Reusable carousel component with Embla Carousel, supporting horizontal and vertical orientations, with navigation buttons and flexible configuration options.",
	"client/src/components/ui/chart.tsx": "Reusable chart component library with Recharts integration, providing customizable chart containers, tooltips, legends, and theme-aware styling utilities for React applications.",
	"client/src/components/ui/checkbox.tsx": "Radix UI-based Checkbox component with customizable styling, accessibility features, and a Check icon indicator for checked states.",
	"client/src/components/ui/collapsible.tsx": "Radix UI Collapsible component wrapper, exporting Root, Trigger, and Content components for creating expandable/collapsible UI elements.",
	"client/src/components/ui/command.tsx": "Reusable command palette component built with cmdk, providing composable UI elements for search, navigation, and interaction with customizable styling and accessibility.",
	"client/src/components/ui/context-menu.tsx": "Radix UI-based context menu component library with customizable subcomponents for creating flexible and accessible context menus in React applications.",
	"client/src/components/ui/dialog.tsx": "Radix UI-based Dialog component with customizable overlay, content, header, footer, title, and description, providing a flexible and accessible modal dialog system for React applications.",
	"client/src/components/ui/drawer.tsx": "Reusable drawer component library using Vaul, providing composable UI elements like DrawerContent, DrawerHeader, DrawerFooter with customizable styling and responsive design.",
	"client/src/components/ui/dropdown-menu.tsx": "Radix UI-based dropdown menu component library with comprehensive subcomponents for creating flexible, accessible, and customizable dropdown interfaces in React.",
	"client/src/components/ui/form.tsx": "Reusable form components library using React Hook Form, providing composable and accessible form elements with built-in error handling and state management.",
	"client/src/components/ui/hover-card.tsx": "Radix UI-based hover card component with customizable content positioning, styling, and animation for creating interactive hover information displays.",
	"client/src/components/ui/input-otp.tsx": "Reusable One-Time Password (OTP) input component with customizable slots, group, and separator, leveraging the input-otp library for flexible and interactive digit-based authentication interfaces.",
	"client/src/components/ui/input.tsx": "Reusable input component with responsive styling, utilizing Tailwind CSS classes and supporting forwarded refs for flexible form input rendering.",
	"client/src/components/ui/label.tsx": "Radix UI Label component with customizable styling using class-variance-authority, providing accessible and responsive label rendering with disabled state support.",
	"client/src/components/ui/menubar.tsx": "Radix UI-based Menubar component library with comprehensive subcomponents for creating accessible, customizable dropdown menus with keyboard navigation and styling support.",
	"client/src/components/ui/navigation-menu.tsx": "Radix UI-based navigation menu component with customizable trigger, content, and viewport, providing a flexible and animated navigation interface with responsive design.",
	"client/src/components/ui/pagination.tsx": "Reusable pagination component library with composable subcomponents for creating flexible and accessible navigation controls, including previous/next buttons, page links, and ellipsis indicators.",
	"client/src/components/ui/popover.tsx": "Radix UI Popover component with customizable positioning, styling, and animation for creating interactive floating content containers in React applications.",
	"client/src/components/ui/progress.tsx": "Radix UI Progress component with customizable styling, rendering a horizontal progress bar with dynamic width based on value prop.",
	"client/src/components/ui/radio-group.tsx": "Radix UI-based radio group component with customizable styling, exporting RadioGroup and RadioGroupItem for creating accessible and themeable radio button interfaces.",
	"client/src/components/ui/resizable.tsx": "Resizable panel components using react-resizable-panels, providing customizable horizontal and vertical panel groups with optional resize handles and styling utilities.",
	"client/src/components/ui/scroll-area.tsx": "Radix UI-based ScrollArea component with customizable vertical and horizontal scrollbars, providing a flexible and accessible scrolling interface for React applications.",
	"client/src/components/ui/select.tsx": "Radix UI-based Select component with customizable trigger, content, items, and scrolling, providing a flexible and accessible dropdown selection interface.",
	"client/src/components/ui/separator.tsx": "Radix UI Separator component with configurable orientation and styling, providing a flexible horizontal or vertical divider for UI layouts.",
	"client/src/components/ui/sheet.tsx": "Radix UI-based sheet (slide-out panel) component with configurable positioning, styling, and accessibility, exporting various subcomponents for creating interactive modal-like interfaces.",
	"client/src/components/ui/sidebar.tsx": "Comprehensive React sidebar component library with responsive design, mobile support, collapsible variants, context management, and multiple sub-components for building flexible navigation interfaces.",
	"client/src/components/ui/skeleton.tsx": "Reusable UI Skeleton component with animated pulse effect for loading states, utilizing Tailwind CSS classes and dynamic styling.",
	"client/src/components/ui/slider.tsx": "Radix UI-based Slider component with customizable styling, supporting touch interactions and accessibility features for range selection.",
	"client/src/components/ui/sonner.tsx": "Customizable toast notification component with theme support, utilizing Sonner library and next-themes for dynamic styling and rendering.",
	"client/src/components/ui/switch.tsx": "Radix UI-based Switch component with customizable styling, supporting checked/unchecked states and accessibility features.",
	"client/src/components/ui/table.tsx": "Reusable, composable React table component library with customizable subcomponents like Table, TableHeader, TableBody, TableRow, and TableCell, utilizing Tailwind CSS for styling and supporting advanced rendering patterns.",
	"client/src/components/ui/tabs.tsx": "Radix UI-based Tabs component with customizable list, trigger, and content elements, providing a flexible and accessible tabbed interface with styling and interaction support.",
	"client/src/components/ui/textarea.tsx": "Shadcn-inspired reusable Textarea component with responsive styling, accessibility features, and customizable class merging using the cn utility function.",
	"client/src/components/ui/theme-provider.tsx": "React context provider for managing theme (dark/light/system) with local storage persistence and dynamic theme switching.",
	"client/src/components/ui/theme-toggle.tsx": "React component for theme toggling between light and dark modes, using state management and dynamic icon rendering with Lucide icons.",
	"client/src/components/ui/toast.tsx": "Radix UI toast component library with customizable variants, providing a comprehensive set of composable toast-related components for displaying notifications with flexible styling and interaction.",
	"client/src/components/ui/toaster.tsx": "Reusable toast notification component that renders dynamic toast messages with optional titles, descriptions, and actions using a custom toast hook.",
	"client/src/components/ui/toggle-group.tsx": "Radix UI-powered toggle group component with customizable variants and sizing, exporting ToggleGroup and ToggleGroupItem for flexible multi-select interactions.",
	"client/src/components/ui/toggle.tsx": "Radix UI Toggle component with customizable variants and sizes, providing a flexible and accessible toggle button implementation using class-variance-authority for styling.",
	"client/src/components/ui/tooltip.tsx": "Radix UI-based tooltip component with customizable content, trigger, and provider for creating interactive hover information displays in React applications.",
	"client/src/contexts/AuthContext.tsx": "React authentication context managing user login, registration, and logout with state persistence in local storage, providing authentication-related methods and user data across the application.",
	"client/src/hooks/useMobile.tsx": "React hook for detecting mobile screen width, providing a boolean flag based on a 768px breakpoint.",
	"client/src/hooks/useToast.ts": "Custom React hook for managing toast notifications with state management, supporting adding, updating, dismissing, and removing toasts with a configurable limit and automatic timeout.",
	"client/src/lib/utils.ts": "Utility function for merging Tailwind CSS classes using clsx and tailwind-merge, enabling dynamic and conditional class composition.",
	"client/src/pages/Automations.tsx": "React component for managing smart home automations, displaying a list of automations with creation, toggling, and statistics features using natural language processing.",
	"client/src/pages/BlankPage.tsx": "React component for a stylized \"Page Not Found\" error page with a gradient background, centered card layout, and a button to navigate back to the dashboard.",
	"client/src/pages/Dashboard.tsx": "Smart home dashboard component rendering device statistics, voice device status, scenes, system health, security alarm, quick actions, and interactive device widgets with real-time control and state management.",
	"client/src/pages/Devices.tsx": "Smart devices management page with grid/list view, search, filtering, and room-based device control functionality using React and custom UI components.",
	"client/src/pages/Login.tsx": "Login page component with form validation, authentication logic, and responsive UI for user sign-in using react-hook-form and custom authentication context.",
	"client/src/pages/Register.tsx": "React component for user registration with form validation, authentication, and responsive UI using react-hook-form and shadcn components.",
	"client/src/pages/Scenes.tsx": "Smart Scenes management page with dynamic scene creation, activation, and visualization, displaying scene statistics, device interactions, and supporting voice-enabled scene controls.",
	"client/src/pages/Settings.tsx": "Comprehensive settings page for configuring system preferences, integrations, AI providers, security, and maintenance operations with dynamic form handling and interactive API key testing.",
	"client/src/pages/UserProfiles.tsx": "User profiles management page with voice recognition configuration, allowing creation, editing, and preview of personalized AI voice profiles with detailed UI for managing voice settings and system prompts.",
	"client/src/pages/VoiceDevices.tsx": "React component for monitoring and managing distributed voice devices, displaying device status, battery levels, and providing testing functionality with comprehensive device statistics and interactive UI.",
	"client/src/services/voicePollingManager.ts": "Singleton service managing voice status polling with dynamic interval, error handling, and multi-component subscription mechanism for real-time voice updates.",
	"server/.env": "Environment configuration file for server, defining critical settings like database connection, JWT secrets, port, and ElevenLabs API credentials for application initialization.",
	"server/.env.example": "Environment configuration template for HomeBrain server, specifying essential environment variables for port, database connection, JWT authentication, and optional ElevenLabs API integration.",
	"server/package.json": "Node.js server configuration file specifying project dependencies, scripts for starting, development, and database seeding, with key packages for authentication, database, AI integrations, and web services.",
	"server/server.js": "Express server configuration with comprehensive route setup for smart home services, including authentication, device management, voice control, and discovery, with WebSocket and graceful shutdown mechanisms.",
	"server/config/database.js": "MongoDB connection utility with robust connection management, error handling, and graceful shutdown for database initialization and monitoring.",
	"server/models/Automation.js": "Mongoose schema for home automation rules, defining complex triggers, actions, execution tracking, and metadata with support for various automation types and advanced configuration options.",
	"server/models/Device.js": "Mongoose schema for smart home devices, modeling various device types with dynamic properties, status tracking, and metadata for comprehensive IoT device management.",
	"server/models/Scene.js": "Mongoose schema for smart home scenes, defining device actions, metadata, and tracking scene activation with support for multiple device interactions and categorization.",
	"server/models/SecurityAlarm.js": "Mongoose schema for home security system, defining alarm states, zones, user codes, and methods for arming, disarming, triggering, and managing security zones with SmartThings integration.",
	"server/models/Settings.js": "Mongoose schema for comprehensive application settings, managing configuration across voice, notification, integration, AI provider, and security domains with methods for retrieving, updating, and sanitizing sensitive configuration data.",
	"server/models/SmartThingsIntegration.js": "Mongoose schema for SmartThings integration, managing OAuth configuration, device synchronization, security tokens, and providing methods for token management, device updates, and configuration tracking.",
	"server/models/User.js": "Mongoose User model schema defining user attributes like email, password, roles, and authentication tokens with validation and JSON transformation rules.",
	"server/models/UserProfile.js": "Mongoose schema for user AI assistant profiles, defining comprehensive settings for voice recognition, personality, preferences, permissions, and customization with advanced configuration options.",
	"server/models/VoiceCommand.js": "Mongoose schema for voice commands, capturing detailed metadata about voice interactions including original text, intent, execution status, LLM processing, and comprehensive tracking of voice-based system interactions.",
	"server/models/VoiceDevice.js": "Mongoose schema for voice-enabled devices, tracking comprehensive device metadata including status, capabilities, connectivity, and performance metrics with pre-save middleware for automatic timestamp updates.",
	"server/models/init.js": "Mongoose database initialization module that imports and registers all application models, establishing a connection to the MongoDB database with configurable connection options.",
	"server/routes/authRoutes.js": "Express router handling authentication routes with login, register, logout, token refresh, and user profile retrieval endpoints, utilizing JWT for secure authentication and token management.",
	"server/routes/automationRoutes.js": "Express router handling CRUD operations for automations, providing endpoints for creating, retrieving, updating, toggling, executing, and deleting automation configurations with comprehensive error handling.",
	"server/routes/deviceRoutes.js": "Express router for device management, providing RESTful endpoints for retrieving, creating, updating, and controlling devices with authentication and comprehensive error handling.",
	"server/routes/elevenLabsRoutes.js": "Express router for ElevenLabs text-to-speech API, providing routes to fetch voices, validate voice IDs, generate speech, create voice previews, and check service integration status.",
	"server/routes/index.js": "Express router configuration handling root and health check routes with welcome and ping endpoints.",
	"server/routes/maintenanceRoutes.js": "Express router for system maintenance operations, providing endpoints to manage fake data, sync devices, reset settings, clear integrations, and perform system health checks.",
	"server/routes/sceneRoutes.js": "Express router for scene management, handling CRUD operations and scene activation with comprehensive error handling and logging for scene-related API endpoints.",
	"server/routes/securityAlarmRoutes.js": "Express router for security alarm management, providing endpoints to retrieve, arm, disarm, configure zones, and sync with SmartThings integration.",
	"server/routes/settingsRoutes.js": "Express router for managing application settings, providing endpoints to retrieve, update, and test connectivity for various API services like ElevenLabs, OpenAI, Anthropic, local LLM, and SmartThings.",
	"server/routes/smartThingsRoutes.js": "Express router for SmartThings integration, providing comprehensive API endpoints for OAuth configuration, device management, scene execution, and smart home security system (STHM) control.",
	"server/routes/userProfileRoutes.js": "Express router handling user profile operations with comprehensive CRUD endpoints, supporting profile management, voice selection, wake word configuration, and device favorites with authentication middleware.",
	"server/routes/voiceDeviceRoutes.js": "Express router for managing voice devices, providing endpoints to retrieve, test, and update device information with authentication middleware.",
	"server/routes/middlewares/auth.js": "JWT authentication middleware for validating user tokens, checking role-based access, and attaching authenticated user details to request object.",
	"server/scripts/addTestVoiceDevice.js": "Node.js script for programmatically adding a test voice device to the database, creating a default HomeBrain voice hub with predefined configuration if no devices exist.",
	"server/scripts/cleanDatabase.js": "Command-line database cleaning utility for HomeBrain Smart Home System, enabling selective or comprehensive database collection deletion with safety checks and user confirmation.",
	"server/scripts/createAdminUser.js": "Command-line script for creating and managing admin users in the HomeBrain Smart Home System, supporting interactive and non-interactive modes with robust password validation and database integration.",
	"server/scripts/seedDatabase.js": "Command-line database seeding script for HomeBrain Smart Home System, enabling selective or comprehensive database population with support for environment checks, seeder management, and detailed error handling.",
	"server/scripts/seedProfiles.js": "Database seeding script for creating initial user profiles with predefined configurations, supporting multiple AI assistant personas with unique voice, language, and permission settings.",
	"server/scripts/seedVoiceDevices.js": "Database seeding script for populating voice device records with sample HomeBrain device configurations, supporting bulk insertion, status tracking, and providing detailed logging of the seeding process.",
	"server/scripts/test-elevenlabs.js": "Diagnostic script for ElevenLabs text-to-speech service, performing comprehensive tests including API key validation, voice retrieval, voice details extraction, and audio generation.",
	"server/scripts/testProfileAPI.js": "Comprehensive test script for user profile API endpoints, executing a series of tests including voice retrieval, profile creation, retrieval, update, status toggling, and deletion with detailed console logging.",
	"server/scripts/testProfileAPIWithAuth.js": "Comprehensive test script for user profile API endpoints, performing authentication, profile creation, retrieval, update, and deletion operations with detailed logging and error handling.",
	"server/scripts/seeds/automationSeeds.js": "Seed script for generating predefined home automation scenarios with diverse triggers, conditions, and actions across categories like security, comfort, and energy management.",
	"server/scripts/seeds/deviceSeeds.js": "Database seeding script for populating device data across multiple rooms, generating a comprehensive set of smart home devices with varied properties and types.",
	"server/scripts/seeds/index.js": "Database seeding orchestrator that manages sequential population of smart home collections with sample data, supporting full and selective seeding operations with detailed logging and error handling.",
	"server/scripts/seeds/sceneSeeds.js": "Seed script for generating predefined smart home scenes with device actions, supporting categories like entertainment, security, and comfort, with dynamic device mapping and logging.",
	"server/scripts/seeds/userProfileSeeds.js": "Database seeding script for generating diverse user profile configurations with multiple AI assistant personas, supporting device favorites, voice settings, and usage tracking.",
	"server/scripts/seeds/voiceDeviceSeeds.js": "Seed script for populating the database with sample voice device configurations, including detailed device metadata, seeding logic, and comprehensive logging of device statistics.",
	"server/services/automationService.js": "Comprehensive automation service with CRUD operations, AI-powered natural language automation creation, and advanced management functions for tracking, toggling, and executing smart home automations.",
	"server/services/deviceService.js": "Device service layer providing comprehensive CRUD operations and advanced management for smart home devices, including filtering, control actions, room grouping, and device statistics generation.",
	"server/services/elevenLabsService.js": "ElevenLabs text-to-speech service wrapper with API integration, voice retrieval, voice validation, and text-to-speech generation, including fallback mock data handling.",
	"server/services/llmService.js": "Service module for sending requests to AI language models (OpenAI and Anthropic), providing a unified interface for generating text completions with retry and error handling mechanisms.",
	"server/services/maintenanceService.js": "Maintenance service for smart home system, providing methods to clear/inject fake data, sync devices from SmartThings and INSTEON, perform system health checks, reset settings, and export system configuration.",
	"server/services/sceneService.js": "Smart home scene management service with comprehensive CRUD operations, scene activation, device action handling, and statistics tracking for scene-based home automation.",
	"server/services/securityAlarmService.js": "Security alarm service managing system arming, disarming, zone configuration, and SmartThings integration with comprehensive status tracking and synchronization methods.",
	"server/services/settingsService.js": "Service class for managing application settings, providing methods to retrieve, update, and sanitize configuration parameters with robust error handling and key validation.",
	"server/services/smartThingsService.js": "SmartThings service class managing OAuth authentication, device interactions, scene execution, and Smart Home Monitor (STHM) control through comprehensive API integration methods.",
	"server/services/userProfileService.js": "Service layer for managing user profiles with comprehensive CRUD operations, supporting profile creation, retrieval, updates, favorites management, and advanced querying with ElevenLabs voice validation integration.",
	"server/services/userService.js": "User service with CRUD operations for user management, providing methods for authentication, user creation, password handling, and database interactions using Mongoose.",
	"server/services/voiceDeviceService.js": "Service class for managing voice device operations, providing methods to retrieve, test, and update voice devices across different statuses and rooms with comprehensive system status tracking.",
	"server/utils/auth.js": "JWT token generation utility for creating access and refresh tokens with user ID payload and configurable expiration periods.",
	"server/utils/password.js": "Password utility functions for secure password hashing, validation, and format checking using bcrypt, with methods to generate hash, compare passwords, and validate hash format.",
	"shared/config/roles.js": "Role configuration module defining application user roles with admin and user constants and an array of all available roles.",
	"shared/types/user.ts": "TypeScript type definition for User model, specifying structure and properties of user accounts in the application.",
	"client/src/api/remoteDevices.ts": "API utility functions for remote device management, providing methods to register, activate, configure, update heartbeat, retrieve setup instructions, and delete remote devices.",
	"server/routes/remoteDeviceRoutes.js": "Express router for managing remote voice device registration, activation, configuration, heartbeat tracking, and setup instructions with comprehensive device lifecycle management endpoints.",
	"server/scripts/createRemoteDevicePackage.js": "Node.js script for generating a downloadable package for HomeBrain Remote Device, creating a tar.gz archive with installation files and setup scripts for Raspberry Pi deployment.",
	"client/src/components/remote/RemoteDeviceSetup.tsx": "React component for remote device registration and setup, providing a multi-step dialog with device details input, registration process, and comprehensive setup instructions with dynamic configuration and copy-to-clipboard functionality.",
	"remote-device/README.md": "Comprehensive README for HomeBrain Remote Device, detailing installation, configuration, and usage of a voice-enabled Raspberry Pi application that connects to a smart home hub with automatic discovery, voice command processing, and WebSocket communication.",
	"remote-device/index.js": "Node.js remote device management script for HomeBrain system, handling WebSocket communication, audio processing, device registration, hub discovery, wake word detection, and command processing with comprehensive configuration and auto-discovery capabilities.",
	"remote-device/install.sh": "Bash installation script for HomeBrain Remote Device on Raspberry Pi, automating system setup, package installation, audio configuration, and device registration with comprehensive error handling and user guidance.",
	"remote-device/package.json": "NPM package configuration for HomeBrain's remote voice device, managing dependencies, scripts, and metadata for a Raspberry Pi-based smart home audio system.",
	"server/public/downloads/homebrain-remote-setup.sh": "Bash installation script for automating HomeBrain remote device setup, creating installation directory and executing device-specific installation process.",
	"server/public/downloads/homebrain-remote-setup.tar.gz": "Compressed tarball archive for HomeBrain remote setup installation package, containing system configuration and deployment files.",
	"server/websocket/voiceWebSocket.js": "WebSocket server for voice devices, managing real-time connections, authentication, voice commands, device status tracking, and handling device-specific events like wake word detection and heartbeats.",
	"client/src/api/discovery.ts": "API utility functions for managing auto-discovery service, including toggling status, fetching pending devices, and approving or rejecting device discovery.",
	"server/routes/discoveryRoutes.js": "Express router for managing device auto-discovery, providing endpoints to toggle discovery service, retrieve pending devices, and approve or reject discovered devices.",
	"server/scripts/testAutoDiscovery.js": "Automated test script for HomeBrain's device auto-discovery system, simulating authentication, testing discovery endpoints, and verifying service toggle functionality.",
	"server/services/discoveryService.js": "UDP-based network discovery service for HomeBrain hub, managing device auto-discovery, broadcasting hub presence, and handling device connection requests across local networks.",
	"client/src/components/discovery/AutoDiscoverySettings.tsx": "React component for managing auto-discovery settings, providing a toggle switch, status display, and detailed network configuration for HomeBrain device discovery.",
	"client/src/components/discovery/PendingDevices.tsx": "React component for managing and approving newly discovered network devices, providing a detailed interface for reviewing, naming, and categorizing pending devices with real-time polling and interactive approval workflow.",
	"DEPLOYMENT.md": "Comprehensive deployment guide for HomeBrain smart home system, detailing installation procedures, network architecture, system requirements, configuration steps, and advanced setup for NVIDIA Jetson Orin Nano and Raspberry Pi distributed voice devices.",
	"docs/configuration.md": "Comprehensive configuration guide for HomeBrain, detailing setup procedures, integrations, user profiles, voice device configuration, security settings, automation rules, and system maintenance strategies.",
	"docs/jetson-setup.md": "Comprehensive setup guide for installing and configuring the HomeBrain smart home platform on NVIDIA Jetson Orin Nano, covering hardware requirements, system configuration, software installation, service setup, and initial deployment steps.",
	"docs/troubleshooting.md": "Comprehensive troubleshooting documentation for HomeBrain, providing detailed diagnostic steps, solutions for system, network, audio, integration, and performance issues, with advanced recovery procedures and support guidance.",
	"scripts/install-jetson.sh": "Bash installation script for HomeBrain on NVIDIA Jetson Orin Nano, automating system setup, dependency installation, service configuration, and environment initialization with comprehensive error handling and user guidance.",
	"scripts/setup-services.sh": "Bash script for comprehensive HomeBrain service management, providing commands for starting, stopping, updating, backing up, and monitoring system services with advanced configuration and health check utilities."
}